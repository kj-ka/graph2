{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","id","value","handleClear","driver1","driver2","path","message","submessage","handleCalculate","state","driver1_valid","validate_driver","driver2_valid","shortestPath","graph","e","console","log","Graph","data","require","year","driver","addEdge","driver_invalid","drivers","levenshtein","driver_valid","distance","d","new_distance","output_arr","push","react_default","a","createElement","key","className","i","length","Media","Left","Body","Right","Form","inline","FormGroup","controlId","ControlLabel","FormControl","autoComplete","spellCheck","onChange","type","Button","onClick","renderResults","neighbors","u","v","undefined","includes","source","queue","visited","predecessor","tail","reverse","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c8dbfe3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Form, FormGroup, FormControl, ControlLabel, Button, Media } from \"react-bootstrap\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      driver1: \"Carlos Sainz\",\n      driver2: \"Fernando Alonso\",\n      path: null,\n      message: \"Ready?\",\n      submessage: \"Press Test to start searching for a link\"\n    }\n  }\n\n  componentDidMount() {\n    var graph = new this.Graph();\n    var data = require('./data.json');\n\n    for (var year in data) {\n      for (var driver in data[year]) {\n        graph.addEdge(driver, data[year][driver]);\n      }\n    }\n\n    this.setState({\n      graph: graph\n    });\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  }\n\n  handleClear = event => {\n    this.setState({\n      driver1: \"\",\n      driver2: \"\",\n      path: null,\n      message: \"Ready?\",\n      submessage: \"Enter the names of two drivers and press Go!\"\n    })\n  }\n\n  // Neat\n  validate_driver(driver_invalid){\n    const drivers = require('./drivers.json')\n    const levenshtein = require('js-levenshtein');\n    var driver_valid = \"\"\n    var distance = 99;\n\n    for (var d in drivers) {\n      var new_distance = levenshtein(drivers[d], driver_invalid)\n      if(new_distance < distance){\n        driver_valid = drivers[d]\n        distance = new_distance\n      }\n    }\n\n    return driver_valid;\n  }\n\n  handleCalculate = event => {\n    if(this.state.driver1 == \"\" || this.state.driver2 == \"\"){\n      return\n    }\n\n    var driver1_valid = this.validate_driver(this.state.driver1);\n    var driver2_valid = this.validate_driver(this.state.driver2);\n    \n    try {\n      var path = this.shortestPath(this.state.graph, driver1_valid, driver2_valid);\n      this.setState({\n        driver1: driver1_valid,\n        driver2: driver2_valid,\n        path: path\n      });\n    } catch (e) {\n      console.log(e)\n      this.setState({\n        path: null,\n        message: \"No, sorry!\",\n        submessage: \"We couldn't find a link between these two drivers.\"\n      })\n    }\n  }\n\n  renderResults() {\n    var path = this.state.path;\n    var output_arr = []\n\n    if (path) {\n      output_arr.push(\n        <div key={-1}>\n          <div className=\"result-title\">Yes!</div>\n          <div className=\"result-subtitle\">And here's why:</div>\n        </div>\n      )\n\n      for (var i = 0; i < path.length - 1; i++) {\n        var driver1 = path[i]\n        var driver2 = path[i + 1]\n        output_arr.push(\n          <Media key={i}>\n            <Media.Left>#{i}</Media.Left>\n            <Media.Body>{driver1} beat {driver2}</Media.Body>\n            <Media.Right>{this.year(driver1, driver2)}</Media.Right>\n          </Media>\n        );\n      }\n\n      return output_arr;\n\n    } else {\n      return (\n        <div>\n          <div className=\"result-title-fail\">{this.state.message}</div>\n          <div className=\"result-subtitle\">{this.state.submessage}</div>\n        </div>\n      )\n    }\n  }\n\n  year(driver1, driver2) {\n    var data = require('./data.json');\n    for (var year in data) {\n      for (var driver in data[year]) {\n        if (data[year][driver1] == driver2) {\n          return year;\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App container text-center\">\n        <h1>Transitive Teammate Comparisons</h1>\n        <h2>It's lights out and astray we go</h2>\n        <Form className=\"text-center\" inline>\n          <FormGroup controlId=\"driver1\">\n            <ControlLabel>is</ControlLabel>\n            <FormControl\n              autoComplete=\"off\"\n              spellCheck=\"false\"\n              onChange={this.handleChange}\n              value={this.state.driver1}\n              type=\"text\"\n            />\n          </FormGroup>\n          <FormGroup controlId=\"driver2\">\n            <ControlLabel>better than</ControlLabel>\n            <FormControl\n              autoComplete=\"off\"\n              spellCheck=\"false\"\n              onChange={this.handleChange}\n              value={this.state.driver2}\n              type=\"text\"\n            />\n            <ControlLabel>?</ControlLabel>\n          </FormGroup>\n        </Form>\n        <Button id=\"clear\" onClick={this.handleClear}>Clear</Button>\n        <Button id=\"calculate\" onClick={this.handleCalculate}>Test</Button>\n        <div className=\"result\">\n          <div className=\"result-inner\">\n            {this.renderResults()}\n          </div>\n        </div>\n        <div className=\"footer\">\n          <span className=\"pull-left\">Currently using data from 1998-onwards.</span>\n          <span className=\"pull-right\">/u/kj-ka-</span>\n        </div>\n      </div>\n    );\n  }\n\n  Graph() {\n    var neighbors = this.neighbors = {};\n\n    this.addEdge = function (u, v) {\n      if (neighbors[u] === undefined) {\n        neighbors[u] = [];\n      }\n      if (!neighbors[u].includes(v)) {\n        neighbors[u].push(v);\n      }\n    };\n    return this;\n  }\n\n  shortestPath(graph, source, target) {\n    if (source == target) {\n      return;\n    }\n    var queue = [source],\n      visited = { source: true },\n      predecessor = {},\n      tail = 0;\n\n    while (tail < queue.length) {\n      var u = queue[tail++], neighbors = graph.neighbors[u];\n      if (neighbors) {\n        for (var i = 0; i < neighbors.length; ++i) {\n          var v = neighbors[i];\n          if (visited[v]) {\n            continue;\n          }\n          visited[v] = true;\n          if (v === target) {\n            var path = [v];\n            while (u !== source) {\n              path.push(u);\n              u = predecessor[u];\n            }\n            path.push(u);\n            path.reverse();\n            return (path);\n          }\n          predecessor[v] = u;\n          queue.push(v);\n        }\n      }\n    }\n    return null;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","id","value","handleClear","driver1","driver2","path","message","submessage","handleSwitch","driver1tmp","state","driver2tmp","handleCalculate","driverLookup","shortestPath","graph","getSuggestions","inputValue","trim","toLowerCase","length","filtered","drivers","filter","driver","includes","reverse","slice","getSuggestionValue","d","renderSuggestion","suggestion","react_default","a","createElement","getDriver1Suggestions","_ref","driver1suggestions","getDriver2Suggestions","_ref2","driver2suggestions","onSuggestionsClearRequested","onDriver1Change","_ref3","newValue","onDriver2Change","_ref4","require","Graph","data","year","addEdge","driver1Props","placeholder","onChange","driver2Props","className","dist_default","spellCheck","suggestions","onSuggestionsFetchRequested","inputProps","Button","onClick","renderResults","output_arr","push","key","i","neighbors","u","v","undefined","source","queue","visited","predecessor","tail","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b56a381b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from \"react-bootstrap\";\nimport Autosuggest from 'react-autosuggest';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      driver1: \"Charles Leclerc\",\n      driver1suggestions: [],\n      driver2: \"Fernando Alonso\",\n      driver2suggestions: [],\n      drivers: require('./drivers.json'),\n      path: null,\n      message: \"Press Go!\",\n      submessage: \"\"\n    }\n  }\n\n  componentDidMount() {\n    var graph = new this.Graph();\n    var data = require('./data.json');\n\n    for (var year in data) {\n      for (var driver in data[year]) {\n        graph.addEdge(driver, data[year][driver]);\n      }\n    }\n\n    this.setState({\n      graph: graph\n    });\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  }\n\n  handleClear = event => {\n    this.setState({\n      driver1: \"\",\n      driver2: \"\",\n      path: null,\n      message: \"Cleared\",\n      submessage: \"Enter two drivers and press Go.\"\n    })\n  }\n\n  handleSwitch = event => {\n    var driver1tmp = this.state.driver1\n    var driver2tmp = this.state.driver2\n    this.setState({\n      driver1: driver2tmp,\n      driver2: driver1tmp\n    })\n  }\n\n  driverLookup(driver) {\n    return this.state.drivers.includes(driver);\n  }\n\n  handleCalculate = event => {\n    if (this.driverLookup(this.state.driver1) && this.driverLookup(this.state.driver2)) {\n      var path = this.shortestPath(this.state.graph, this.state.driver1, this.state.driver2);\n      if (path) {\n        this.setState({\n          path: path\n        });\n      } else {\n        this.setState({\n          path: null,\n          message: \"No, sorry!\",\n          submessage: \"We couldn't find a link between these two drivers.\"\n        });\n      }\n    } else {\n      this.setState({\n        path: null,\n        message: \"Error\",\n        submessage: \"Enter the names of two drivers. Use the drop-down list to help.\"\n      });\n    }\n  }\n\n  year(driver1, driver2) {\n    var data = require('./data.json');\n    for (var year in data) {\n      for (var driver in data[year]) {\n        if (data[year][driver1] == driver2) {\n          return year;\n        }\n      }\n    }\n  }\n\n  getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n      return []\n    }\n    \n    var filtered = this.state.drivers.filter(driver =>\n      driver.toLowerCase().includes(inputValue)\n    ).reverse();\n\n    if (filtered.length > 5) {\n      return filtered.slice(0, 6);\n    }\n\n    return filtered;\n  };\n\n\n  // Just return the driver. No JSON navigation necessary.\n  getSuggestionValue = d => d;\n\n  // Just render the suggestion.\n  renderSuggestion = suggestion => (<span>{suggestion}</span>);\n\n  // Get suggestions for driver 1.\n  getDriver1Suggestions = ({ value }) => {\n    this.setState({ driver1suggestions: this.getSuggestions(value) });\n  };\n\n  // Get suggestions for driver 2.\n  getDriver2Suggestions = ({ value }) => {\n    this.setState({ driver2suggestions: this.getSuggestions(value) });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      driver1suggestions: []\n    });\n  };\n\n  onDriver1Change = (event, { newValue }) => { this.setState({ driver1: newValue }); };\n  onDriver2Change = (event, { newValue }) => { this.setState({ driver2: newValue }); };\n\n  render() {\n    var driver1Props = { placeholder: '', value: this.state.driver1, onChange: this.onDriver1Change };\n    var driver2Props = { placeholder: '', value: this.state.driver2, onChange: this.onDriver2Change };\n\n    return (\n      <div className=\"App container\">\n        <div className=\"logo\">\n          <div className=\"chevron\">></div>\n          <div className=\"text-container\">\n            <div className=\"transistive\">Transitive</div>\n            <div className=\"teammate\">Teammate</div>\n            <div className=\"comparisons\">Comparisons</div>\n          </div>\n        </div>\n\n        <div className=\"inputs\">\n          <div className=\"text\">is</div>\n          <Autosuggest\n            spellCheck=\"false\"\n            suggestions={this.state.driver1suggestions}\n            onSuggestionsFetchRequested={this.getDriver1Suggestions}\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n            getSuggestionValue={this.getSuggestionValue}\n            renderSuggestion={this.renderSuggestion}\n            inputProps={driver1Props}\n          />\n          <div className=\"text\">better than</div>\n          <Autosuggest\n            spellCheck=\"false\"\n            suggestions={this.state.driver2suggestions}\n            onSuggestionsFetchRequested={this.getDriver2Suggestions}\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n            getSuggestionValue={this.getSuggestionValue}\n            renderSuggestion={this.renderSuggestion}\n            inputProps={driver2Props}\n          />\n          <div className=\"text\">?</div>\n        </div>\n\n        <div className=\"buttons\">\n          <Button id=\"clear\" onClick={this.handleClear}><i className=\"fas fa-times\"></i>Clear</Button>\n          <Button id=\"switch\" onClick={this.handleSwitch}><i className=\"fas fa-exchange-alt\"></i>Swap</Button>\n          <Button id=\"calculate\" onClick={this.handleCalculate}><i className=\"fas fa-chevron-right\"></i>Go</Button>\n        </div>\n\n        <div className=\"result text-center\">\n          <div className=\"result-inner\">\n            {this.renderResults()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderResults() {\n    var path = this.state.path;\n    var output_arr = []\n\n    if (path) {\n      output_arr.push(\n        <div key={-1}>\n          <div className=\"result-title\">Yes!</div>\n          <div className=\"result-subtitle\">And here's why:</div>\n        </div>\n      )\n\n      for (var i = 0; i < path.length - 1; i++) {\n        var driver1 = path[i]\n        var driver2 = path[i + 1]\n        output_arr.push(\n          <div className=\"result-row\" key={i}>\n            <div className=\"wrapper\">\n              <div className=\"row-item left\"><div className=\"driver-left\">{driver1}</div></div>\n              <div className=\"row-item middle\">\n                <div className=\"beat\">beat</div>\n                <div className=\"year\">in {this.year(driver1, driver2)}</div>\n              </div>\n              <div className=\"row-item right\"><span className=\"driver-right\">{driver2}</span></div>\n            </div>\n            <div className=\"arrow-down\"></div>\n          </div>\n\n          // <div className=\"result-row\" key={i}>\n          //   <Media>\n          //     <Media.Body>{driver1} beat {driver2}</Media.Body>\n          //     <Media.Right><div>{this.year(driver1, driver2)}</div></Media.Right>\n          //   </Media>\n          //   <div className=\"arrow-down\"></div>\n          // </div>\n        );\n      }\n      return output_arr;\n    } else {\n      return (\n        <div>\n          <div className=\"result-title-fail\">{this.state.message}</div>\n          <div className=\"result-subtitle\">{this.state.submessage}</div>\n        </div>\n      )\n    }\n  }\n\n  Graph() {\n    var neighbors = this.neighbors = {};\n\n    this.addEdge = function (u, v) {\n      if (neighbors[u] === undefined) {\n        neighbors[u] = [];\n      }\n      if (!neighbors[u].includes(v)) {\n        neighbors[u].push(v);\n      }\n    };\n    return this;\n  }\n\n  shortestPath(graph, source, target) {\n    if (source == target) {\n      return;\n    }\n    var queue = [source],\n      visited = { source: true },\n      predecessor = {},\n      tail = 0;\n\n    while (tail < queue.length) {\n      var u = queue[tail++], neighbors = graph.neighbors[u];\n      if (neighbors) {\n        for (var i = 0; i < neighbors.length; ++i) {\n          var v = neighbors[i];\n          if (visited[v]) {\n            continue;\n          }\n          visited[v] = true;\n          if (v === target) {\n            var path = [v];\n            while (u !== source) {\n              path.push(u);\n              u = predecessor[u];\n            }\n            path.push(u);\n            path.reverse();\n            return (path);\n          }\n          predecessor[v] = u;\n          queue.push(v);\n        }\n      }\n    }\n    return null;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}